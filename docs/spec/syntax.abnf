; nml concrete syntax -------------------------------------------------------- ;

; Note:
; The parser accepts a (large) superset of all valid nml programs, largely
; because this makes it smaller (and hence easier to keep correct). It also
; helps in keeping the syntax clean and consistent.
; This process involves unifying the syntax for items, expressions, types, and
; patterns into the one (tiny) grammar below.
; The term "thing" was settled on to express a single "node" in the parse tree.
; A "thing" might be an item, a pattern, an expression, or a type. The actual
; distinction is not made until later in the compiler.

start         = things
things        = *thing

thing         = item{lambda}
simple        = item{anno}
item{default} = let / if / case / default

let           = ("let" / "data") def *("and" def) ["in" thing]
def           = anno ["=" thing]

if            = "if" thing "do" thing ("else" thing / "end")
case          = "case" [anno] [lambda] "end"

lambda        = ["|"] simple *(("|" / "=>") simple)

anno          = apply [":" apply]
apply         = 1*field
field         = base *("." name)
base          = name / NUMBER / "_" / "..." / "infix" / "postfix"
base         =/ "(" thing ")"
base         =/ "{" *(def ",") [def] "}"

name          = NAME / OPERATOR / UNIVERSAL

NAME          = START *IDENT
OPERATOR      = 1*(SYMBOL / PUNCTUATION)
UNIVERSAL     = "'" NAME
NUMBER        = DIGIT *(DIGIT / "_")

START         = XID_START
IDENT         = XID_CONTINUE / "'" / "_"
